import os
import uuid
from dotenv import load_dotenv
from datetime import datetime, timedelta, timezone
from supabase import create_client

# ===== 1. Load bi·∫øn m√¥i tr∆∞·ªùng =====
load_dotenv()
supabase = create_client(
    os.getenv("SUPABASE_URL"),
    os.getenv("SUPABASE_SERVICE_ROLE_KEY")
)

# ===== 2. C·∫•u h√¨nh =====
CONFIDENCE_THRESHOLD = 0.75
TIME_WINDOW_MINUTES = 45

# ===== 3. L·∫•y gi·ªù Vi·ªát Nam =====
def get_now_vn():
    return datetime.now(timezone(timedelta(hours=7)))

# ===== 4. X·ª≠ l√Ω t√≠n hi·ªáu =====
def execute_signals():
    now_utc = datetime.utcnow()
    window_start = int((now_utc - timedelta(minutes=TIME_WINDOW_MINUTES)).timestamp() * 1000)

    try:
        response = supabase.table("ai_predictions") \
            .select("*") \
            .gte("confidence", CONFIDENCE_THRESHOLD) \
            .gte("timestamp", window_start) \
            .order("timestamp", desc=True) \
            .limit(50) \
            .execute()

        predictions = response.data or []
        print(f"üì• C√≥ {len(predictions)} t√≠n hi·ªáu m·∫°nh c·∫ßn x·ª≠ l√Ω...")

    except Exception as e:
        print(f"‚ùå L·ªói khi truy v·∫•n ai_predictions: {e}")
        return

    for pred in predictions:
        symbol = pred.get("symbol")
        action = pred.get("prediction")
        prediction_id = pred.get("id")

        if action == "HOLD":
            print(f"‚è≠Ô∏è B·ªè qua t√≠n hi·ªáu HOLD cho {symbol}")
            continue

        try:
            check = supabase.table("trading_logs") \
                .select("id") \
                .eq("prediction_id", prediction_id) \
                .maybe_single() \
                .execute()

            if check and check.data:
                print(f"‚ö†Ô∏è T√≠n hi·ªáu {symbol} ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥. B·ªè qua.")
                continue
        except Exception as e:
            print(f"‚ùå L·ªói khi ki·ªÉm tra log cho {symbol}: {e}")
            continue

        # ‚úÖ L·∫•y d·ªØ li·ªáu AI
        def safe_float(value):
            try:
                return float(value)
            except:
                return 0.0

        entry_price    = safe_float(pred.get("entry_price"))
        tp             = safe_float(pred.get("tp"))
        sl             = safe_float(pred.get("sl"))
        high           = safe_float(pred.get("high"))
        low            = safe_float(pred.get("low"))
        current_price  = safe_float(pred.get("current_price"))
        qty            = 0.01
        executed_at    = get_now_vn().isoformat()
        predicted_by   = pred.get("model_name", "AI")
        timestamp_ms   = pred.get("timestamp")

        # Hi·ªÉn th·ªã tu·ªïi t√≠n hi·ªáu
        if timestamp_ms:
            try:
                signal_time = datetime.fromtimestamp(timestamp_ms / 1000, tz=timezone.utc)
                age_minutes = (datetime.now(timezone.utc) - signal_time).total_seconds() / 60
                print(f"üïí T√≠n hi·ªáu {symbol} c√°ch ƒë√¢y kho·∫£ng {round(age_minutes)} ph√∫t")
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω th·ªùi gian cho {symbol}: {e}")

        # Ki·ªÉm tra gi√° tr·ªã ƒë·∫ßu v√†o
        print(f"‚úÖ DEBUG: {symbol} | entry: {entry_price}, tp: {tp}, sl: {sl}, price_now: {current_price}")

        print(f"‚û°Ô∏è V√†o l·ªánh {action} {symbol} t·∫°i gi√° {entry_price}")

        log_data = {
            "id": str(uuid.uuid4()),
            "symbol": symbol,
            "action": action,
            "price": entry_price,
            "tp": tp,
            "sl": sl,
            "high": high,
            "low": low,
            "current_price": current_price,
            "qty": qty,
            "executed_at": executed_at,
            "predicted_by": predicted_by,
            "prediction_id": prediction_id,
            "notes": "T·ª± ƒë·ªông t·∫°o t·ª´ AI",
            "created_at": executed_at
        }

        try:
            supabase.table("trading_logs").insert(log_data).execute()
            print(f"‚úÖ ƒê√£ ghi log l·ªánh {action} cho {symbol}")

            try:
                supabase.table("ai_predictions") \
                    .update({ "executed": True }) \
                    .eq("id", prediction_id) \
                    .execute()
            except Exception as e:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t 'executed' cho {symbol}: {e}")

        except Exception as e:
            print(f"‚ùå L·ªói khi ghi log cho {symbol}: {e}")

    print("üéØ Ho√†n t·∫•t x·ª≠ l√Ω t·∫•t c·∫£ t√≠n hi·ªáu!")

# ===== 5. Ch·∫°y n·∫øu g·ªçi tr·ª±c ti·∫øp =====
if __name__ == "__main__":
    execute_signals()
