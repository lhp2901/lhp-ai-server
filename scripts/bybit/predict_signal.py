import os
import pandas as pd
from supabase import create_client, Client
from dotenv import load_dotenv
import joblib
from datetime import datetime

# ===== 1. Load bi·∫øn m√¥i tr∆∞·ªùng =====
load_dotenv()
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_SERVICE_ROLE_KEY = os.getenv("SUPABASE_SERVICE_ROLE_KEY")
supabase: Client = create_client(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY)

# ===== 2. C·∫•u h√¨nh =====
MODEL_PATH = "model/model_rf.pkl"

# ===== 3. Load model ML =====
def load_model():
    try:
        model = joblib.load(MODEL_PATH)
        print("‚úÖ ƒê√£ load model th√†nh c√¥ng!")
        return model
    except Exception as e:
        raise Exception(f"‚ùå Kh√¥ng load ƒë∆∞·ª£c model: {e}")

# ===== 4. L·∫•y d·ªØ li·ªáu g·∫ßn nh·∫•t =====
def fetch_latest_data(symbol):
    try:
        res = supabase.table("training_dataset")\
            .select("*")\
            .eq("symbol", symbol)\
            .order("timestamp", desc=True)\
            .limit(1)\
            .execute()
        if not res.data:
            print(f"‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu m·ªõi cho {symbol}")
            return None
        return pd.DataFrame(res.data)
    except Exception as e:
        print(f"‚ùå L·ªói fetch d·ªØ li·ªáu cho {symbol}: {e}")
        return None

# ===== 5. Ti·ªÅn x·ª≠ l√Ω =====
def preprocess(df, model):
    # L·∫•y c√°c c·ªôt model c·∫ßn
    expected_features = list(model.feature_names_in_)

    # Ch·ªâ gi·ªØ l·∫°i c√°c c·ªôt c√≥ trong model
    df = df[[col for col in expected_features if col in df.columns]]

    df.fillna(0, inplace=True)
    return df

# ===== 6. Mapping d·ª± ƒëo√°n =====
def decode_prediction(pred):
    mapping = {1: "BUY", 0: "HOLD", -1: "SELL"}
    return mapping.get(pred, "HOLD")

# ===== 7. Ghi d·ª± ƒëo√°n l√™n Supabase =====
def insert_prediction(symbol, timestamp, prediction, confidence=0.0, model_name="baseline_v1"):
    record = {
        "symbol": symbol,
        "timestamp": int(timestamp),
        "prediction": prediction,
        "confidence": float(round(confidence, 4)),
        "model_name": model_name,
        "created_at": datetime.now().isoformat()
    }
    try:
        # Check n·∫øu ƒë√£ t·ªìn t·∫°i r·ªìi th√¨ b·ªè qua ho·∫∑c c·∫≠p nh·∫≠t
        existing = supabase.table("ai_predictions")\
            .select("id")\
            .eq("symbol", symbol)\
            .eq("timestamp", int(timestamp))\
            .execute()
        
        if existing.data and len(existing.data) > 0:
            print(f"‚è≠Ô∏è B·ªè qua prediction cho {symbol} l√∫c {timestamp} - ƒë√£ t·ªìn t·∫°i")
            return
        
        supabase.table("ai_predictions").insert(record).execute()
        print(f"‚úÖ ƒê√£ l∆∞u prediction {prediction} cho {symbol} l√∫c {timestamp}")
    except Exception as e:
        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ insert prediction cho {symbol}: {e}")

# ===== 8. H√†m ch√≠nh =====
def run():
    model = load_model()

    symbols_res = supabase.table("watched_symbols").select("symbol").execute()
    symbols = [s["symbol"] for s in symbols_res.data]
    print(f"üìå B·∫Øt ƒë·∫ßu d·ª± ƒëo√°n {len(symbols)} symbol...")

    for symbol in symbols:
        print(f"\nüîç D·ª± ƒëo√°n cho {symbol}...")
        df_latest = fetch_latest_data(symbol)
        if df_latest is None or df_latest.empty:
            continue

        try:
            X = preprocess(df_latest.copy(), model) 
            pred = model.predict(X)[0]

            # N·∫øu l√† classifier c√≥ predict_proba ‚Üí d√πng
            if hasattr(model, "predict_proba"):
                pred_proba = model.predict_proba(X)[0]
                confidence = max(pred_proba)
            else:
                confidence = 1.0  # fallback n·∫øu kh√¥ng c√≥ predict_proba

            pred_label = decode_prediction(int(round(pred)))  # convert regressor float ‚Üí int
            timestamp = df_latest.iloc[0]["timestamp"]

            insert_prediction(symbol, timestamp, pred_label, confidence)
        except Exception as e:
            print(f"‚ùå L·ªói khi predict {symbol}: {e}")

# ===== 9. Ch·∫°y tr·ª±c ti·∫øp =====
if __name__ == "__main__":
    run()
