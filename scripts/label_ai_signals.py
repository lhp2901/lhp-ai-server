import os
import sys
import pandas as pd
from datetime import datetime, timedelta
from dotenv import load_dotenv
from supabase import create_client, Client

# ‚úÖ Cho in ti·∫øng Vi·ªát terminal
sys.stdout.reconfigure(encoding='utf-8')

# ‚úÖ Load bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_SERVICE_ROLE_KEY = os.getenv("SUPABASE_SERVICE_ROLE_KEY")

if not SUPABASE_URL or not SUPABASE_SERVICE_ROLE_KEY:
    print("‚ùå Thi·∫øu SUPABASE_URL ho·∫∑c SUPABASE_SERVICE_ROLE_KEY trong .env")
    sys.exit(1)

supabase: Client = create_client(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY)

# ‚úÖ L·∫•y c√°c t√≠n hi·ªáu ch∆∞a g√°n nh√£n
def fetch_unlabeled_signals():
    try:
        res = supabase.table("ai_market_signals") \
            .select("*") \
            .is_("label_win", None) \
            .execute()
        return pd.DataFrame(res.data) if res.data else pd.DataFrame()
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y t√≠n hi·ªáu ch∆∞a g√°n label: {e}")
        return pd.DataFrame()

# ‚úÖ L·∫•y d·ªØ li·ªáu th·ªã tr∆∞·ªùng sau ng√†y t√≠n hi·ªáu
def fetch_market_data(index_code: str, from_date: str, days_after: int = 3):
    table = "vnindex_data" if index_code == "VNINDEX" else "vn30_data"
    try:
        res = (
            supabase.table(table)
            .select("date, close")
            .gte("date", from_date)
            .order("date", desc=False)
            .limit(days_after + 1)
            .execute()
        )
        df = pd.DataFrame(res.data)
        df["date"] = pd.to_datetime(df["date"])
        return df.sort_values("date").reset_index(drop=True)
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y gi√° {index_code} - {from_date}: {e}")
        return pd.DataFrame()

# ‚úÖ C·∫≠p nh·∫≠t nh√£n th·∫Øng/thua
def update_label(signal_id: str, label_win: bool):
    try:
        res = supabase.table("ai_market_signals") \
            .update({"label_win": int(label_win)}) \
            .eq("id", signal_id) \
            .execute()
        if res.data:
            print(f"‚úÖ G·∫Øn {signal_id}: label_win = {label_win}")
        else:
            print(f"‚ö†Ô∏è Kh√¥ng c·∫≠p nh·∫≠t ƒë∆∞·ª£c {signal_id}")
    except Exception as e:
        print(f"‚ùå L·ªói update label: {e}")

# ‚úÖ G·∫Øn nh√£n cho t·ª´ng t√≠n hi·ªáu
def process_signals():
    print("üöÄ B·∫Øt ƒë·∫ßu g·∫Øn label_win cho t√≠n hi·ªáu AI...")
    df_signals = fetch_unlabeled_signals()

    if df_signals.empty:
        print("‚úÖ Kh√¥ng c√≥ t√≠n hi·ªáu n√†o c·∫ßn g·∫Øn label.")
        return

    for _, row in df_signals.iterrows():
        index_code = row["index_code"]
        signal_date = row["date"]
        signal_id = row["id"]
        signal_type = row["signal_type"]

        if isinstance(signal_date, str):
            signal_date = pd.to_datetime(signal_date)

        # ‚è≥ B·ªè qua n·∫øu ch∆∞a ƒë·ªß 3 ng√†y
        if (datetime.now() - signal_date).days < 3:
            print(f"‚è≥ B·ªè qua {index_code} {signal_date.date()} v√¨ ch∆∞a ƒë·ªß 3 ng√†y")
            continue

        market_data = fetch_market_data(index_code, signal_date.strftime("%Y-%m-%d"))

        if len(market_data) < 2:
            print(f"‚ö†Ô∏è Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ƒë√°nh gi√° {index_code} ng√†y {signal_date.date()}")
            continue

        current_close = market_data.iloc[0]["close"]
        future_close = market_data.iloc[-1]["close"]
        pct_change = (future_close - current_close) / current_close

        # üìä Logic ƒë√°nh gi√° th·∫Øng/thua t√πy t√≠n hi·ªáu
        threshold = 0.005  # 0.5%
        if signal_type == "tƒÉng":
            label_win = pct_change >= threshold
        elif signal_type == "gi·∫£m":
            label_win = pct_change <= -threshold
        else:  # ƒëi ngang
            label_win = abs(pct_change) < threshold

        # üß† Log chi ti·∫øt
        print(
            f"üß† {index_code} {signal_date.date()} ({signal_type}) | Gi√°: {current_close:.2f} ‚Üí {future_close:.2f} | "
            f"Thay ƒë·ªïi: {pct_change*100:.2f}% ‚Üí {'‚úÖ Win' if label_win else '‚ùå Fail'}"
        )

        # ‚úÖ C·∫≠p nh·∫≠t label
        update_label(signal_id, label_win)

if __name__ == "__main__":
    process_signals()
