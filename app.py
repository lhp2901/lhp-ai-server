from flask import Flask, request, jsonify
import subprocess
import joblib
import os
import numpy as np
import json
from dotenv import load_dotenv

try:
    from supabase import create_client
    print("‚úÖ ƒê√£ import ƒë∆∞·ª£c create_client t·ª´ supabase")
except Exception as e:
    print("‚ùå Kh√¥ng import ƒë∆∞·ª£c create_client:", str(e))
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Load bi·∫øn m√¥i tr∆∞·ªùng ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Kh·ªüi t·∫°o Flask ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app = Flask(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Load m√¥ h√¨nh AI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
MODEL_PATH = os.getenv("MODEL_PATH", "model/model.pkl")
model = None

try:
    model = joblib.load(MODEL_PATH)
    print(f"‚úÖ Loaded model t·ª´ {MODEL_PATH}")
except Exception as e:
    print(f"‚ùå L·ªói khi load model t·ª´ {MODEL_PATH}: {str(e)}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Predict cho 1 m√£ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.route("/predict", methods=["POST"])
def predict():
    if model is None:
        return jsonify({"error": "‚ùå Model ch∆∞a ƒë∆∞·ª£c load"}), 500

    try:
        data = request.get_json()

        expected_fields = [
            'close', 'volume', 'ma20', 'rsi',
            'bb_upper', 'bb_lower', 'foreign_buy_value', 'foreign_sell_value'
        ]

        features = []
        for field in expected_fields:
            if field not in data:
                return jsonify({"error": f"‚ùå Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc: {field}"}), 400
            try:
                features.append(float(data[field]))
            except Exception:
                features.append(0)

        X = np.array([features])
        prob = model.predict_proba(X)[0][1]

        recommendation = (
            "MUA" if prob > 0.7 else
            "B√ÅN" if prob < 0.3 else
            "GI·ªÆ"
        )

        return jsonify({
            "probability": round(float(prob), 4),
            "recommendation": recommendation
        })

    except Exception as e:
        print("üî• Predict error:", str(e))
        return jsonify({"error": f"‚ùå L·ªói x·ª≠ l√Ω d·ªØ li·ªáu: {str(e)}"}), 500

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Train m√¥ h√¨nh ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.route("/train", methods=["POST"])
def train_model():
    try:
        result = subprocess.run(
            ["python", "scripts/train_ai_model.py"],
            capture_output=True,
            text=True
        )
        return jsonify({ "message": result.stdout or result.stderr })
    except Exception as e:
        return jsonify({ "error": f"L·ªói train model: {str(e)}" }), 500

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ T·ªëi ∆∞u danh m·ª•c ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.route("/optimize", methods=["POST"])
def optimize():
    try:
        result = subprocess.run(
            ["python", "scripts/portfolio_optimizer.py"],
            capture_output=True,
            text=True
        )
        return jsonify({ "message": result.stdout or result.stderr })
    except Exception as e:
        return jsonify({ "error": f"L·ªói optimize: {str(e)}" }), 500

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ D·ª± ƒëo√°n to√†n b·ªô ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.route("/predict_all", methods=["POST"])
def predict_all():
    try:
        result = subprocess.run(
            ["python", "scripts/predict_all.py"],
            capture_output=True,
            text=True
        )
        return jsonify({ "message": result.stdout or result.stderr })
    except Exception as e:
        return jsonify({ "error": f"L·ªói predict_all: {str(e)}" }), 500

@app.route("/portfolio", methods=["POST"])
def portfolio():
    try:
        # üì• Nh·∫≠n d·ªØ li·ªáu ƒë·∫ßu v√†o t·ª´ client
        raw_data = request.get_json()
        if not raw_data or "userId" not in raw_data:
            return jsonify({"error": "‚ùå Thi·∫øu userId trong request!"}), 400

        user_id = raw_data["userId"]

        # üåê L·∫•y bi·∫øn m√¥i tr∆∞·ªùng
        supabase_url = os.getenv("SUPABASE_URL")
        supabase_key = os.getenv("SUPABASE_SERVICE_ROLE_KEY")

        if not supabase_url or not supabase_key:
            return jsonify({"error": "‚ùå Thi·∫øu SUPABASE_URL ho·∫∑c SUPABASE_SERVICE_ROLE_KEY"}), 500

        # üîå T·∫°o client Supabase
        if not create_client:
            return jsonify({ "error": "‚ö†Ô∏è create_client ch∆∞a ƒë∆∞·ª£c import ‚Äî ki·ªÉm tra g√≥i supabase" }), 500

        sb = create_client(supabase_url, supabase_key)
        print(f"‚úÖ Supabase client created for user {user_id}")

        # üìä L·∫•y d·ªØ li·ªáu t·ª´ b·∫£ng ai_signals
        resp = sb.table("ai_signals").select("*") \
            .eq("user_id", user_id) \
            .order("date", desc=True) \
            .execute()

        records = resp.data or []

        if not records:
            return jsonify({"error": "‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu AI signals cho user n√†y"}), 404

        # ‚öôÔ∏è G·ªçi script portfolio_optimizer.py
        input_json = json.dumps(records)
        p = subprocess.Popen(
            ["python", "scripts/portfolio_optimizer.py"],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )

        stdout, stderr = p.communicate(input=input_json)

        if p.returncode != 0:
            return jsonify({
                "error": "‚ùå portfolio_optimizer.py tr·∫£ l·ªói",
                "stderr": stderr.strip()
            }), 500

        try:
            portfolio = json.loads(stdout)
        except json.JSONDecodeError:
            return jsonify({
                "error": "‚ùå Kh√¥ng parse ƒë∆∞·ª£c k·∫øt qu·∫£ JSON t·ª´ optimizer",
                "raw_output": stdout
            }), 500

        return jsonify({
            "date": records[0]["date"],
            "portfolio": portfolio
        })

    except Exception as e:
        traceback_str = traceback.format_exc()
        return jsonify({
            "error": f"üî• L·ªói x·ª≠ l√Ω portfolio: {str(e)}",
            "trace": traceback_str
        }), 500
     

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Endpoint ki·ªÉm tra ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.route("/", methods=["GET"])
def home():
    return "‚úÖ LHP-AI-SERVER ƒëang ho·∫°t ƒë·ªông!"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Ch·∫°y server ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
