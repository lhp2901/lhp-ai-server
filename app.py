from flask import Flask, request, jsonify
import subprocess
import joblib
import os
import numpy as np
import json
from dotenv import load_dotenv
from supabase import create_client
import supabase     
from scripts.bybit.bybit_to_supabase import run_sync
import traceback 
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))    
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Load bi·∫øn m√¥i tr∆∞·ªùng ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Kh·ªüi t·∫°o Flask ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app = Flask(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Load m√¥ h√¨nh AI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
MODEL_PATH = os.getenv("MODEL_PATH", "model/model.pkl")
model = None

try:
    model = joblib.load(MODEL_PATH)
    print(f"‚úÖ Loaded model t·ª´ {MODEL_PATH}")
except Exception as e:
    print(f"‚ùå L·ªói khi load model t·ª´ {MODEL_PATH}: {str(e)}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Predict cho 1 m√£ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.route("/predict", methods=["POST"])
def predict():
    if model is None:
        return jsonify({"error": "‚ùå Model ch∆∞a ƒë∆∞·ª£c load"}), 500

    try:
        data = request.get_json()

        expected_fields = [
            'close', 'volume', 'ma20', 'rsi',
            'bb_upper', 'bb_lower', 'foreign_buy_value', 'foreign_sell_value'
        ]

        features = []
        for field in expected_fields:
            if field not in data:
                return jsonify({"error": f"‚ùå Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc: {field}"}), 400
            try:
                features.append(float(data[field]))
            except Exception:
                features.append(0)

        X = np.array([features])
        prob = model.predict_proba(X)[0][1]

        recommendation = (
            "MUA" if prob > 0.7 else
            "B√ÅN" if prob < 0.3 else
            "GI·ªÆ"
        )

        return jsonify({
            "probability": round(float(prob), 4),
            "recommendation": recommendation
        })

    except Exception as e:
        print("üî• Predict error:", str(e))
        return jsonify({"error": f"‚ùå L·ªói x·ª≠ l√Ω d·ªØ li·ªáu: {str(e)}"}), 500

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Train m√¥ h√¨nh ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.route("/train", methods=["POST"])
def train_model():
    try:
        result = subprocess.run(
            ["python", "scripts/train_ai_model.py"],
            capture_output=True,
            text=True
        )
        return jsonify({ "message": result.stdout or result.stderr })
    except Exception as e:
        return jsonify({ "error": f"L·ªói train model: {str(e)}" }), 500

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ T·ªëi ∆∞u danh m·ª•c ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.route("/optimize", methods=["POST"])
def optimize():
    try:
        result = subprocess.run(
            ["python", "scripts/portfolio_optimizer.py"],
            capture_output=True,
            text=True
        )
        return jsonify({ "message": result.stdout or result.stderr })
    except Exception as e:
        return jsonify({ "error": f"L·ªói optimize: {str(e)}" }), 500

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ D·ª± ƒëo√°n to√†n b·ªô ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.route("/predict_all", methods=["POST"])
def predict_all():
    try:
        result = subprocess.run(
            ["python", "scripts/predict_all.py"],
            capture_output=True,
            text=True
        )
        return jsonify({ "message": result.stdout or result.stderr })
    except Exception as e:
        return jsonify({ "error": f"L·ªói predict_all: {str(e)}" }), 500

@app.route("/portfolio", methods=["POST"])
def portfolio():
    try:
        raw_data = request.get_json()

        if not raw_data or "userId" not in raw_data:
            return jsonify({"error": "Thi·∫øu userId!"}), 400

        supabase_url = os.getenv("SUPABASE_URL")
        supabase_key = os.getenv("SUPABASE_SERVICE_ROLE_KEY")  # d√πng SERVICE ROLE m·ªõi ƒë∆∞·ª£c quy·ªÅn ƒë·ªçc to√†n b·ªô

        sb = create_client(supabase_url, supabase_key)

        resp = sb.table("ai_signals").select("*")\
            .eq("user_id", raw_data["userId"])\
            .order("date", desc=True)\
            .execute()

        records = resp.data or []

        # G·ªçi portfolio_optimizer.py b·∫±ng subprocess
        import subprocess
        import json

        p = subprocess.Popen(
            ["python", "scripts/portfolio_optimizer.py"],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )

        stdout, stderr = p.communicate(json.dumps(records))

        if p.returncode != 0:
            return jsonify({ "error": "L·ªói khi ch·∫°y portfolio_optimizer", "stderr": stderr }), 500

        try:
            portfolio = json.loads(stdout)
        except:
            return jsonify({ "error": "L·ªói parse k·∫øt qu·∫£ JSON t·ª´ optimizer", "raw": stdout }), 500

        return jsonify({
            "date": records[0]["date"] if records else None,
            "portfolio": portfolio
        })

    except Exception as e:
        return jsonify({ "error": f"L·ªói x·ª≠ l√Ω portfolio: {str(e)}" }), 500
     
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ G·ªçi to√†n b·ªô pipeline AI: insert ‚Üí label ‚Üí evaluate ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.route("/run_daily", methods=["POST"])
def run_daily():
    steps = [
        ("Insert AI signals", "scripts/insert_ai_signals.py"),
        ("Label AI signals", "scripts/label_ai_signals.py"),
        ("Evaluate AI accuracy", "scripts/evaluate_ai_accuracy.py"),
    ]

    logs = []

    for step_name, script in steps:
        print(f"üöÄ ƒêang ch·∫°y: {step_name}")

        try:
            result = subprocess.run(
                ["python", script],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                encoding="utf-8",
                errors="replace"  # ‚úÖ ch·ªëng UnicodeDecodeError
            )

            log_entry = {
                "step": step_name,
                "script": script,
                "returncode": result.returncode,
                "stdout": result.stdout.strip() if result.stdout else "",
                "stderr": result.stderr.strip() if result.stderr else "",
            }

            logs.append(log_entry)

            if result.returncode != 0:
                return jsonify({
                    "error": f"L·ªói khi ch·∫°y {step_name}",
                    "logs": logs
                }), 500

        except Exception as e:
            logs.append({
                "step": step_name,
                "script": script,
                "returncode": -1,
                "stdout": "",
                "stderr": str(e),
            })
            return jsonify({
                "error": f"Exception t·∫°i b∆∞·ªõc {step_name}",
                "logs": logs
            }), 500

    return jsonify({
        "message": "‚úÖ ƒê√£ ho√†n th√†nh to√†n b·ªô pipeline AI",
        "logs": logs
    }), 200

@app.route("/bybit/bybit_to_supabase", methods=["POST"])
def sync_bybit():
    logs = []

    try:
        logs.append("üì° Nh·∫≠n y√™u c·∫ßu POST t·ª´ Next.js")
        logs.append("üîÑ B·∫Øt ƒë·∫ßu g·ªçi h√†m run_sync()...")

        inserted = run_sync(logs)  # Truy·ªÅn logs ƒë·ªÉ ghi chi ti·∫øt qu√° tr√¨nh

        logs.append(f"\nüéØ T·ªïng c·ªông ƒë√£ th√™m {inserted} n·∫øn v√†o Supabase.")
        success_msg = f"‚úÖ ƒê·ªìng b·ªô th√†nh c√¥ng! ƒê√£ th√™m {inserted} n·∫øn."
        logs.append(success_msg)

        return jsonify({
            'message': success_msg,
            'logs': logs
        })

    except Exception as e:
        error_msg = f"‚ùå L·ªói khi ƒë·ªìng b·ªô: {str(e)}"
        logs.append(error_msg)
        logs.extend(traceback.format_exc().splitlines())
        return jsonify({ 'error': str(e), 'logs': logs }), 500
        
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ G·ªçi to√†n b·ªô pipeline AI: insert ‚Üí label ‚Üí evaluate ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ƒê·∫£m b·∫£o in ƒë∆∞·ª£c ti·∫øng Vi·ªát v√† emoji ra stdout
os.environ["PYTHONIOENCODING"] = "utf-8"

def run_script(script_filename):
    base_dir = os.path.dirname(os.path.realpath(__file__))
    script_path = os.path.join(base_dir, "scripts", "bybit", script_filename)  # ‚úÖ s·ª≠a ·ªü ƒë√¢y

    if not os.path.isfile(script_path):
        return {
            "success": False,
            "stdout": "",
            "stderr": f"‚ùå KH√îNG T√åM TH·∫§Y FILE: {script_path}"
        }

    try:
        completed = subprocess.run(
            [sys.executable, script_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            encoding="utf-8",
            errors="replace",
            check=True
        )
        return {
            "success": True,
            "stdout": completed.stdout.strip(),
            "stderr": completed.stderr.strip()
        }
    except subprocess.CalledProcessError as e:
        return {
            "success": False,
            "stdout": e.stdout.strip() if e.stdout else "",
            "stderr": e.stderr.strip() if e.stderr else f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong {script_filename}"
        }

@app.route("/bybit/run_daily", methods=["POST"])
def run_daily_ai():
    stdout = []
    stderr = []

    try:
        stdout.append("üöÄ B·∫Øt ƒë·∫ßu ch·∫°y quy tr√¨nh AI h√†ng ng√†y...")

        steps = [
            ("generate_training_data.py", "üìä Sinh d·ªØ li·ªáu training"),
            ("train_model.py", "ü§ñ Hu·∫•n luy·ªán m√¥ h√¨nh"),
            ("predict_signal.py", "üîÆ D·ª± ƒëo√°n t√≠n hi·ªáu"),
            ("ai_execute_signals.py", "üí• Ghi t√≠n hi·ªáu v√†o b·∫£ng")
        ]

        for filename, description in steps:
            stdout.append(f"\nüîÑ {description} ({filename})...")
            result = run_script(filename)

            if result["success"]:
                stdout.append(f"‚úÖ {description} th√†nh c√¥ng.")
                if result["stdout"]:
                    stdout.append(result["stdout"])
                if result["stderr"]:
                    stdout.append(f"‚ö†Ô∏è C·∫£nh b√°o:\n{result['stderr']}")
            else:
                stderr.append(f"‚ùå {description} th·∫•t b·∫°i!")
                stderr.append(result["stderr"])
                stdout.append(result["stdout"])
                break  # D·ª´ng quy tr√¨nh t·∫°i ƒë√¢y n·∫øu l·ªói

        if stderr:
            raise Exception("M·ªôt b∆∞·ªõc trong quy tr√¨nh ƒë√£ th·∫•t b·∫°i.")

        stdout.append("\nüèÅ ‚úÖ TO√ÄN B·ªò QUY TR√åNH ƒê√É CH·∫†Y TH√ÄNH C√îNG.")

        return jsonify({
            "message": "ƒê√£ ch·∫°y xong quy tr√¨nh AI h√†ng ng√†y",
            "stdout": "\n".join(stdout),
            "stderr": ""
        })

    except Exception as e:
        tb_lines = traceback.format_exc().splitlines()
        error_msg = f"‚ùå L·ªói khi ch·∫°y quy tr√¨nh AI h√†ng ng√†y: {str(e)}"
        stderr.insert(0, error_msg)
        stderr.extend(tb_lines)

        return jsonify({
            "error": error_msg,
            "stdout": "\n".join(stdout),
            "stderr": "\n".join(stderr)
        }), 500
        
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Endpoint ki·ªÉm tra ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.route("/", methods=["GET"])
def home():
    return "‚úÖ LHP-AI-SERVER ƒëang ho·∫°t ƒë·ªông!"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Ch·∫°y server ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
